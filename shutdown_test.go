// WARNING: This file contains tests generated by AI.

package goscade

import (
	"os"
	"syscall"
	"testing"
	"time"
)

// Test: CreateRunnerWithGracefulContext creates valid runner and context
func TestCreateRunnerWithGracefulContext(t *testing.T) {
	runner, ctx := CreateRunnerWithGracefulContext()

	// Test: Context is not done initially
	select {
	case <-ctx.Done():
		t.Error("context should not be done initially")
	default:
	}

	// Test: Runner is not done initially
	done := make(chan struct{})
	go func() {
		runner.Wait()
		close(done)
	}()

	select {
	case <-done:
		t.Error("runner should not be done initially")
	case <-time.After(100 * time.Millisecond):
		// Expected - runner is still running
	}
}

// Test: CreateRunnerWithGracefulContext handles SIGTERM
func TestCreateRunnerWithGracefulContext_SIGTERM(t *testing.T) {
	runner, ctx := CreateRunnerWithGracefulContext()

	// Send SIGTERM
	p, err := os.FindProcess(os.Getpid())
	if err != nil {
		t.Fatalf("failed to find process: %v", err)
	}
	if err := p.Signal(syscall.SIGTERM); err != nil {
		t.Fatalf("failed to send signal: %v", err)
	}

	// Wait for context to be done
	select {
	case <-ctx.Done():
		// Expected
	case <-time.After(time.Second):
		t.Error("context should be done after SIGTERM")
	}

	// Wait for runner to complete
	if err := runner.Wait(); err != nil {
		t.Errorf("unexpected error from runner: %v", err)
	}
}

// Test: CreateRunnerWithGracefulContext handles SIGINT
func TestCreateRunnerWithGracefulContext_SIGINT(t *testing.T) {
	runner, ctx := CreateRunnerWithGracefulContext()

	// Send SIGINT
	p, err := os.FindProcess(os.Getpid())
	if err != nil {
		t.Fatalf("failed to find process: %v", err)
	}
	if err := p.Signal(syscall.SIGINT); err != nil {
		t.Fatalf("failed to send signal: %v", err)
	}

	// Wait for context to be done
	select {
	case <-ctx.Done():
		// Expected
	case <-time.After(time.Second):
		t.Error("context should be done after SIGINT")
	}

	// Wait for runner to complete
	if err := runner.Wait(); err != nil {
		t.Errorf("unexpected error from runner: %v", err)
	}
}
